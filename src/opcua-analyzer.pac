# Generated by binpac_quickstart

refine flow opcua_Flow += {

  function make_string(message_type: uint8[3]): const_bytestring
  %{
  return binpac::const_bytestring(message_type -> data(), 3);
  %}

  function enum_message(message_type: uint8[3]): int
  %{
  binpac::bytestring s(message_type -> data(), 3);
  s.clone();
  if (s == "HEL") {
    return HELLO;
  } else if (s == "ACK") {
    return ACK;
  } else if (s == "OPN") {
    return OPEN;
  } else if (s == "MSG") {
    return MESSAGE;
  } else if (s == "ERR") {
    return ERROR;
  }
  return OTHER;

  %}
};

refine flow opcua_Flow += {


  function proc_generic_message(msg: opcua_GenericMsg): bool
    %{

    zeek::BifEvent::enqueue_opcua_event(connection()->zeek_analyzer(), connection()->zeek_analyzer()->Conn(), ${msg.is_orig}, enum_message(${msg.message_type}), to_stringval(make_string(${msg.message_type})), ${msg.message_size});
    return true;
    %}


  function proc_hello_message(msg: opcua_HelloMsg): bool
    %{

    zeek::BifEvent::enqueue_opcua_hello_message(connection()->zeek_analyzer(), connection()->zeek_analyzer()->Conn(), ${msg.params.ProtocolVersion}, to_stringval(${msg.EndpointUrl}));
    return true;
    %}


  function proc_error_message(msg: opcua_ErrorMsg): bool
    %{

    zeek::BifEvent::enqueue_opcua_error_message(connection()->zeek_analyzer(), connection()->zeek_analyzer()->Conn(), ${msg.Error}, to_stringval(${msg.Reason}));
    return true;
    %}


  function proc_msg_message(msg: opcua_Msg): bool
    %{

    if (${msg.is_orig}) {
      zeek::BifEvent::enqueue_opcua_request(connection()->zeek_analyzer(), connection()->zeek_analyzer()->Conn(), ${msg.SecureChannelId});
    } else {
      zeek::BifEvent::enqueue_opcua_response(connection()->zeek_analyzer(), connection()->zeek_analyzer()->Conn(), ${msg.SecureChannelId});
    }

    return true;
    %}
};

refine typeattr opcua_GenericMsg += &let {
  proc: bool = $context.flow.proc_generic_message(this);
};

refine typeattr opcua_HelloMsg += &let {
  proc: bool = $context.flow.proc_hello_message(this);
};

refine typeattr opcua_ErrorMsg += &let {
  proc: bool = $context.flow.proc_error_message(this);
};

refine typeattr opcua_Msg += &let {
  proc: bool = $context.flow.proc_msg_message(this);
};
